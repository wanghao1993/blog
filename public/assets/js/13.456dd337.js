(window.webpackJsonp=window.webpackJsonp||[]).push([[13],{576:function(t,a,s){"use strict";s.r(a);var e=s(13),n=Object(e.a)({},(function(){var t=this,a=t.$createElement,s=t._self._c||a;return s("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[s("h5",{attrs:{id:"_1-http0-9-1-0-1-1-2-0-3-0的区别"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_1-http0-9-1-0-1-1-2-0-3-0的区别"}},[t._v("#")]),t._v(" 1.http0.9, 1.0, 1.1 2.0 3.0的区别")]),t._v(" "),s("blockquote",[s("p",[t._v("http0.9 现在已经淘汰，最开始的版本，只支持get请求")])]),t._v(" "),s("blockquote",[s("p",[t._v("http1.0 在0.9的基础上增加一些特性")]),t._v(" "),s("blockquote",[s("p",[t._v("1.增加了请求头和相应头\n2.响应对象不再是文本，可以是图片文件等\n3.支持post，head方法\n4.支持长链接，默认还是短连接\n5.增加了缓存机制，expires和since-last-modify")])])]),t._v(" "),s("blockquote",[s("p",[t._v("http1.1")]),t._v(" "),s("blockquote",[s("p",[t._v("1.默认长连接\n2.请求流水线，一个tcp可执行多个请求，不需要重复建立连接\n3.提供范围请求content-range\n4.提供HOST\n5.增加了一些缓存字段\n6.新增了多个状态码")])])]),t._v(" "),s("blockquote",[s("p",[t._v("http2.0")]),t._v(" "),s("blockquote",[s("p",[t._v("1.服务端推送\n2.多路复用\n3.头部压缩\n4.二进制分帧\n5.请求优先级")])])]),t._v(" "),s("p",[t._v("=====未完")]),t._v(" "),s("blockquote",[s("p",[t._v("http3.0")]),t._v(" "),s("blockquote",[s("p",[t._v("1.采用QUIC\n2.解决了队头阻塞，拥塞控制\n3.两个密钥\n4.前向安全问题")])])]),t._v(" "),s("h5",{attrs:{id:"_2-tcp和udp的区别"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_2-tcp和udp的区别"}},[t._v("#")]),t._v(" 2.tcp和udp的区别")]),t._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",[s("code",[t._v("1.TCP需要先建立连接，udp不需要\n2.tcp点对点，udp随意\n3.tcp面向字节流，可拆分，udp面向报文不可拆分\n4.udp主机不需要维护很多的状态\n")])])]),s("h5",{attrs:{id:"_3-http和https的区别"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_3-http和https的区别"}},[t._v("#")]),t._v(" 3.http和https的区别")]),t._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",[s("code",[t._v("1.http端口是80 https是443\n2.http是不安全的，明文传输，https传输过程是加密的，比较安全\n3.https和http链接方式不同，http是无状态的链接，https是由SSL+http协议构建的可进行加密传输，身份认证的网络协议\n")])])]),s("h5",{attrs:{id:"_4-https原理"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_4-https原理"}},[t._v("#")]),t._v(" 4.https原理")]),t._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",[s("code",[t._v("本质是http+ssl加密。\n1.首先http向服务端发送请求，\n2.服务端发送证书过来\n3.客户端验证证书是否合法，有效，生成公钥，公钥加密后传输给服务端\n4.服务端拿到加密后的消息，然后用私钥解密，拿到密钥\n5.建立ssl链接，https通道建立\n")])])]),s("h5",{attrs:{id:"_4-三次握手和四次挥手"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_4-三次握手和四次挥手"}},[t._v("#")]),t._v(" 4.三次握手和四次挥手")]),t._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",[s("code",[t._v("三次握手   \n目的：确定建立起了可靠的连接\n1.客户端向服务端发送SYN\n2.服务端接收到SYN，发送自己的ACK和SYN\n3.客户端接收到发送自己的ACK\n\n四次挥手\n目的：确保大家完全断开\n1.客户端发送FIN给服务端，进入FIN_wait状态\n2.服务端接收到后，发送ACK=1到客户端，进入CLOSE_wait状态\n3.服务端将FIN置为1，然后进入lact_ack状态\n4.客户端收到FIN，发送ACK到服务端，服务端关闭，客户端变成Time_wait状态\n5.等待2个MSL后客户端关闭\n")])])]),s("h5",{attrs:{id:"_5-如何保证不丢包和有序进行"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_5-如何保证不丢包和有序进行"}},[t._v("#")]),t._v(" 5.如何保证不丢包和有序进行")]),t._v(" "),s("h5",{attrs:{id:"_6-get和post请求的区别"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_6-get和post请求的区别"}},[t._v("#")]),t._v(" 6.get和post请求的区别")]),t._v(" "),s("h5",{attrs:{id:"_7-cookie"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_7-cookie"}},[t._v("#")]),t._v(" 7.cookie")]),t._v(" "),s("h5",{attrs:{id:"_8-一个http连接的过程经历哪些步骤"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_8-一个http连接的过程经历哪些步骤"}},[t._v("#")]),t._v(" 8.一个http连接的过程经历哪些步骤")])])}),[],!1,null,null,null);a.default=n.exports}}]);